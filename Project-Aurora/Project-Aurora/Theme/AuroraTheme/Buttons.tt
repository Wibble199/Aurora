<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".xaml" #>
<#
var variations = new[] { "Panel1", "Panel2", "Danger", "Flat" };

#>
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:u="clr-namespace:Aurora.Utils"
	xmlns:c="clr-namespace:Aurora.Controls">

    <!-- #region ButtonBase -->
    <!-- ButtonBase definition (which can be applied to all button types, e.g. button, repeatbutton etc.) -->
    <Style TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{StaticResource BaseButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource BaseButtonForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource BaseButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThickness}" />
        <Setter Property="Padding" Value="4" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Padding="{TemplateBinding Padding}" CornerRadius="{StaticResource ControlBorderRadius}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
							<ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}" />
                                </Style>
                            </ContentPresenter.Resources>
						</ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Button.IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
            </Trigger>

            <EventTrigger RoutedEvent="Button.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <u:BrushAnimation Storyboard.TargetProperty="Background" To="{StaticResource BaseButtonBackgroundHoverBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="Foreground" To="{StaticResource BaseButtonForegroundHoverBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="BorderBrush" To="{StaticResource BaseButtonBorderHoverBrush}" Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <EventTrigger RoutedEvent="Button.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <u:BrushAnimation Storyboard.TargetProperty="Background" To="{StaticResource BaseButtonBackgroundBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="Foreground" To="{StaticResource BaseButtonForegroundBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="BorderBrush" To="{StaticResource BaseButtonBorderBrush}" Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

	<!-- Default button styles (when no style is explicitly provided) -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}" />
	<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ButtonBase}}" />
	<Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type ButtonBase}}" />

	<# foreach (var variation in variations) { #>

	<!-- #region <#= variation #> button definition -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="<#= variation #>ButtonBase" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Background" Value="{StaticResource <#= variation #>ButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource <#= variation #>ButtonForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource <#= variation #>ButtonBorderBrush}" />

        <Style.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <u:BrushAnimation Storyboard.TargetProperty="Background" To="{StaticResource <#= variation #>ButtonBackgroundHoverBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="Foreground" To="{StaticResource <#= variation #>ButtonForegroundHoverBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="BorderBrush" To="{StaticResource <#= variation #>ButtonBorderHoverBrush}" Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>

            <EventTrigger RoutedEvent="Button.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <u:BrushAnimation Storyboard.TargetProperty="Background" To="{StaticResource <#= variation #>ButtonBackgroundBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="Foreground" To="{StaticResource <#= variation #>ButtonForegroundBrush}" Duration="{StaticResource AnimationDuration}" />
							<u:BrushAnimation Storyboard.TargetProperty="BorderBrush" To="{StaticResource <#= variation #>ButtonBorderBrush}" Duration="{StaticResource AnimationDuration}" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

	<!-- Usable styles -->
	<Style TargetType="{x:Type Button}" x:Key="<#= variation #>Button" BasedOn="{StaticResource <#= variation #>ButtonBase}" />
	<Style TargetType="{x:Type ToggleButton}" x:Key="<#= variation #>ToggleButton" BasedOn="{StaticResource <#= variation #>ButtonBase}" />
	<Style TargetType="{x:Type RepeatButton}" x:Key="<#= variation #>RepeatButton" BasedOn="{StaticResource <#= variation #>ButtonBase}" />
	<!-- #endregion -->
	<# } #>


	<!-- ToggleButton with dropdown indicator -->
    <Style TargetType="{x:Type ToggleButton}" x:Key="DropDownToggleButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="4" CornerRadius="{StaticResource ControlBorderRadius}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <ContentPresenter Margin="0,0,30,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" TextBlock.Foreground="{TemplateBinding Foreground}"  />
                            <c:Icon x:Name="ArrowIcon" Source="/Aurora;component/Resources/UIIcons/expand-arrow.png" Width="18" Margin="4,0" HorizontalAlignment="Right" IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                                <c:Icon.RenderTransform>
                                    <RotateTransform Angle="0" />
                                </c:Icon.RenderTransform>
                            </c:Icon>
                        </Grid>
                    </Border>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowIcon" Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)" To="180" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowIcon" Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>