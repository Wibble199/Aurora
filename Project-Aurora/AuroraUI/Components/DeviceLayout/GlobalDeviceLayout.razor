@inject IJSRuntime JsRuntime;
@inject Aurora.Devices.Layout.GlobalDeviceLayout deviceLayout

<div class="virtual-layout no-select">
    <svg xmlns="http://www.w3.org/2000/svg" style="width:100%;height:100%" @ref="virtualLayout" data-editmode="@EditMode.ToString()">
        <g> @* Root SVG element that will have the zoom/scale and pan/translation transformations applied *@
            @foreach (var device in deviceLayout.AllLayouts) {
                <DeviceLayout Device="@device" />
            }
        </g>
        <line x1="0" x2="100%" data-role="hoz-guide" style="display:none" />
        <line y1="0" y2="100%" data-role="vert-guide" style="display:none" />
    </svg>
    <ToggleButton IconRight="ruler-square" Class="virtual-layout-edit-button" @bind-Checked="EditMode" />
</div>


@code {
        ElementReference virtualLayout;

    public bool EditMode { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            JsRuntime.InvokeVoidAsync("auroraUi.deviceLayout.init", virtualLayout, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void SetDevicePosition(byte deviceTypeId, byte deviceId, double x, double y) {
        try {
            var dev = deviceLayout.GetDeviceFromTypeAndId(deviceTypeId, deviceId);
            if (dev != null)
                dev.Location = new System.Drawing.Point((int)x, (int)y);
        } catch (KeyNotFoundException) {
            Console.WriteLine($"Attempted to access an invalid device with type id {deviceTypeId} and device id {deviceId}.");
        }
    }
}
