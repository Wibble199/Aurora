@page "/"
@using Aurora.Settings.Layers;
@using AuroraUI.Utils
@using v = Aurora.Core.Overrides.Visual
@inject Aurora.AuroraCore Core

<!-- This file contains the main layout -->

<CascadingValue Name="SelectedLayer" Value="SelectedLayer">
<CascadingValue Name="SelectedLayerChanged" Value="SelectedLayerChanged" TValue="Action<Layer>">
    <SplitPanel Class="root-container">

        <!-- Left most column (application list) -->
        <SplitPanelItem Size="240" Grow="0">
            <div class="d-f f-v h-full" style="background: #1A1F26">
                <!-- Top item: logo -->
                <img class="aurora-logo as-c" src="https://via.placeholder.com/64/000000/EEEEEE" width="64" height="64" />

                <!-- Second item: search -->
                <Textbox Placeholder="Search..." />

                <!-- Main item: app list -->
                <ApplicationList @bind-SelectedApplication="FocusedApplication" Class="fg-1" />

                <!-- Bottom item: buttons (add, show/hide visible etc.) -->
                <ButtonGroup Class="as-c">
                    <AuroraButton Label="Add" />
                    <AuroraButton Label="Show/hide" />
                    <AuroraButton Label="Settings" />
                </ButtonGroup>
            </div>
        </SplitPanelItem>


        <!-- Second column (profiles/layers lists) -->
        <SplitPanelItem Size="240" Grow="0" Class="layers-column">
            <ProfileLayerList @bind-CurrentApplication="FocusedApplication" />
        </SplitPanelItem>


        <!-- Last column (preview and layer properties/overview) -->
        <SplitPanelItem Grow="1" Class="central">
            <SplitPanel Orientation="Orientation.Vertical" Class="h-full">
                <!-- Preview -->
                <SplitPanelItem>
                    <AuroraUI.Components.DeviceLayout.GlobalDeviceLayout />
                </SplitPanelItem>

                <!-- Bottom pane -->
                <SplitPanelItem>
                    <SplitPanel Class="h-full properties">
                        <!-- Layer properties -->
                        <SplitPanelItem>

                            <VisualProgramPresenter Program="TestProgram" />

                            <button @onclick="TestRun">Run</button>


                            <InputFieldGeneric TValue="string" @bind-Value="TestString" />
                            <span><strong>Value:</strong> @TestString</span>
                            <br />
                            <InputFieldGeneric TValue="bool" @bind-Value="TestBool" />
                            <span><strong>Value:</strong> @TestBool</span>
                            <br />
                            <InputFieldGeneric TValue="System.Drawing.Color" @bind-Value="TestColor" />
                            <span><strong>Value:</strong> @TestColor.ToString()</span>
                            <br />
                            <InputFieldGeneric TValue="TestEnum" @bind-Value="TestEnumValue" />
                            <span><strong>Value:</strong> @TestEnumValue.ToString()</span>
                            <br />
                            <InputField InputType="typeof(TestEnum)" @bind-Value="TestEnumObject" />
                            <span><strong>Value:</strong> @TestEnumObject.ToString()</span>
                        </SplitPanelItem>

                        <!-- Overview -->
                        <SplitPanelItem Size="240" Grow="0" Class="overview">
                            <h4>Overview</h4>

                            <p><strong>Selected layer:</strong> @SelectedLayer?.Name</p>
                            <p><strong>Selected app:</strong> @FocusedApplication?.Config.Name</p>
                        </SplitPanelItem>
                    </SplitPanel>                    
                </SplitPanelItem>
            </SplitPanel>
        </SplitPanelItem>
    </SplitPanel>
</CascadingValue>
</CascadingValue>

@code {
    Application FocusedApplication { get; set; }

    //v::VisualProgram TestProgram { get; set; } = new v::VisualProgram {
    //    Entries = new List<v.Base.VisualEntry> {
    //        new v.Base.VisualEntry { Body = new v::Base.IVisualStatement[] {
    //            new v::VariableSetter<double> { VariableName = "a", Value = new v::Literal<double>(10) },
    //            new v::OperatorAssign { VariableName = "a", Value = new v::Literal<double>(20) },
    //            new v::Print { Output = new v::VariableGetter<double>{ VariableName = "a" } }
    //        } }
    //    },
    //    VariableDefinitions = new Dictionary<string, (Type type, object @default)> { { "a", (typeof(double), default(double)) } }
    //};

    v::VisualProgram TestProgram { get; set; } = new v::VisualProgram {
        Entries = new List<v.Base.VisualEntry> {
            new v.Base.VisualEntry { Body = new v::Base.IVisualStatement[] {
                new v::Print { Output = new v::Literal<double>(20) }
            } }
        },
    };

    void TestRun()
{
        TestProgram.ResetVariableValues();
        TestProgram.Entries.First().GetLambda(TestProgram).Compile().DynamicInvoke();
    }

    string TestString { get; set; } = "Initial";
    bool TestBool { get; set; }
    System.Drawing.Color TestColor { get; set; } = System.Drawing.Color.Red;
    TestEnum TestEnumValue { get; set; } = TestEnum.B;
    object TestEnumObject { get; set; } = TestEnum.C;

    Layer SelectedLayer { get; set; }
    void SelectedLayerChanged(Layer layer) { SelectedLayer = layer; StateHasChanged(); }

    protected override void OnInitialized()
    {
        FocusedApplication = Core.LightingStateManager.DesktopProfile;
    }

    public enum TestEnum {
        A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
    }
}